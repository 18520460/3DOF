// 6/8/2022 AnhNguyen 


module uabsdahblds01
#(
	parameter	ADR_WIDTH	32,
	parameter	SDAT_WIDTH	64,
	parameter	MDAT_WIDTH	32,
	parameter	PRT_WIDTH	4,
	parameter	MTR_WIDTH	1,
	parameter	SBA_WIDTH	1,
	parameter	SBW_WIDTH	1,
	parameter	SBR_WIDTH	1
)
(
	input	HCLK,
	input	HRESET_N,
	//master side
	input						S_HWRITE,
	input	[2:0]				S_HBURST,
	input	[1:0]				S_HTRANS,
	input	[2:0]				S_HSIZE,
	input	[ADR_WIDTH - 1:0]	S_HADDR,
	input	[SDAT_WIDTH - 1:0]	S_HWDATA,
	output	[SDAT_WIDTH - 1:0]	S_HRDATA,
	output						S_HREADY,
	output						S_HRESP,
	//slave side
	output						M_HWRITE,
	output	[2:0]				M_HBURST,
	output	[1:0]				M_HTRANS,
	output	[2:0]				M_HSIZE,
	output	[ADR_WIDTH - 1:0]	M_HADDR,
	output	[MDAT_WIDTH:0]		M_HWDATA,
	input	[MDAT_WIDTH:0]		M_HRDATA,
	input						M_HREADY,
	input						M_HRESP
);
	localparam	BYTE		3'b000;
	localparam	HALFWORD	3'b001;
	localparam	WORD		3'b010;
	localparam	DOUBLEWORD	3'b011;
	localparam	IDLE		2'b00;
	localparam	BUSY		2'b01;
	localparam	NONSEQ		2'b10;
	localparam	SEQ			2'b11;
	localparam	SINGLE		3'b000;
	localparam	INCR4		3'b011;
	localparam	INCR8		3'b101;
	
	
	
	//isx_wait control signal FSM
	localparam 	OK			1'b1;
	localparam	WAIT		1'b0;
	
	reg is_wait;
	always @(posedge HCLK) begin
		if(HRESET_N) 
			is_wait <= OK; 
		else begin
			case(is_wait)
				OK: if(S_HSIZE == DOUBLEWORD && M_HREADY && ((S_HTRANS == NONSEQ) || S_HTRANS == SEQ)) is_wait <= WAIT;
				WAIT: if(M_HREADY) is_wait <= OK;
			endcase
		end
	end
	
	
	
	
	
	//1.6.2 brust conversion
	reg 		prev_S_HWRITE;
	reg [1:0]	next_S_HTRANS;
	reg [2:0]	next_S_HBURST;
	reg [2:0]	next_S_HSIZE;
	reg [31:0]	next_S_HADDR;
	always @(posedge HCLK) begin
		if(HRESET_N) begin
			prev_S_HWRITE	<= 0;
			next_S_HTRANS 	<= 2'b0;
			next_S_HBURST	<= 3'b000;
			next_S_HSIZE	<= 3'b000;
			next_S_HADDR 	<= 32'd0;
		end
		else if(S_HREADY) begin
			prev_S_HWRITE 	<= 	S_HWRITE;
			next_S_HTRANS	<=	(S_HTRANS == NONSEQ && S_HBURST == SINGLE)	? NONSEQ:
								(S_HTRANS == NONSEQ && S_HBURST == INCR4)	? SEQ	: NONSEQ;
			next_S_HBURST	<=	(S_HSIZE == DOUBLEWORD && S_HBURST == INCR4) ? INCR8 : S_HBURST;
			next_S_HSIZE	<= 	(S_HSIZE == DOUBLEWORD) WORD : S_HSIZE;
			next_S_HADDR	<= S_HADDR + 32'd4;
		end
	end
	assign M_HWRITE = (!S_HREADY && M_HREADY) ? prev_S_HWRITE : S_HWRITE;
	assign M_HTRANS = (!S_HREADY && M_HREADY) ? next_S_HTRANS : S_HTRANS;
	assign M_HADDR  = (!S_HREADY && M_HREADY) ? next_S_HADDR  : S_HADDR;
	assign M_HBURST	= (!S_HREADY && M_HREADY) ? next_S_HBURST : (S_HSIZE == DOUBLEWORD && S_HBURST == INCR4) ? INCR8 : S_HBURST;
	assign M_HSIZE	= (!S_HREADY && M_HREADY) ? next_S_HSIZE  :	(S_HSIZE == DOUBLEWORD) ? WORD : S_HSIZE;
	//1.6.3 response signal control
	reg	error_1st;
	reg error_2nd;
	always @(posedge HCLK) begin
		if(HRESET_N) begin
			error_1st <= 1'b0;
			error_2nd <= 1'b0;
		end 
		else begin
			if(!M_HREADY && M_HRESP)
				error_1st <= 1'b1;
			else 
				error_1st <= 1'b0;
			if(M_HREADY && M_HRESP)
				error_2nd <= 1'b1;
			else
				error_2nd <= 1'b0;
		end		
	end
	assign S_HREADY =	(is_wait) ? (M_HREADY && is_wait) : !error_1st;
	assign S_HRESP	=	(is_wait) ? M_HRESP : (error_1st || error_2nd);	
	
	
	//1.6.1 data bus control
	wire 	wdata_lane_crl;
	wire 	rdata_lane_crl;
	wire [63:0]	rdata_bus;
	reg	[2:0]	prev_S_HSIZE;
	reg	[2:0]	prev_M_HSIZE;
	reg [2:0]	prev_S_HADDR;
	reg [2:0]	prev_M_HADDR;
	reg [31:0]	rdata_buf;
	always @(posedge HCLK) begin
		if(HRESET_N) begin
			prev_S_HSIZE <= 3'b000;
			prev_M_HSIZE <= 3'b000;
			prev_S_HADDR <=	3'b000; 
			prev_M_HADDR <=	3'b000; 
			rdata_buf 	 <= 32'd0;
		end
		else begin
			prev_S_HSIZE <= S_HSIZE;
			prev_M_HSIZE <= M_HSIZE;
			prev_S_HADDR <= S_HADDR[2:0];
			prev_M_HADDR <= M_HADDR[2:0];
			rdata_buf	 <= rdata_bus[31:0]
		end
	end
	assign	wdata_lane_crl = 	(prev_S_HSIZE == DOUBLEWORD && !S_HREADY) ? 0 :
								(prev_S_HSIZE == DOUBLEWORD &&  S_HREADY) ? 1 :
								(prev_S_HSIZE == WORD && prev_S_HADDR == 3'd0) ? 0 :
								(prev_S_HSIZE == WORD && prev_S_HADDR == 3'd4) ? 1 :
								(prev_S_HSIZE == HALFWORD && prev_S_HADDR == 3'd0) ? 0 :
								(prev_S_HSIZE == HALFWORD && prev_S_HADDR == 3'd2) ? 0 :
								(prev_S_HSIZE == HALFWORD && prev_S_HADDR == 3'd4) ? 1 :
								(prev_S_HSIZE == HALFWORD && prev_S_HADDR == 3'd6) ? 1 :
								(prev_S_HSIZE == BYTE && prev_S_HADDR == 3'd0) ? 0 :
								(prev_S_HSIZE == BYTE && prev_S_HADDR == 3'd1) ? 0:
								(prev_S_HSIZE == BYTE && prev_S_HADDR == 3'd2) ? 0 :
								(prev_S_HSIZE == BYTE && prev_S_HADDR == 3'd3) ? 0 :
								(prev_S_HSIZE == BYTE && prev_S_HADDR == 3'd4) ? 1:
								(prev_S_HSIZE == BYTE && prev_S_HADDR == 3'd5) ? 1 :
								(prev_S_HSIZE == BYTE && prev_S_HADDR == 3'd6) ? 1 :
								(prev_S_HSIZE == BYTE && prev_S_HADDR == 3'd7) ? 1 : 0;
	assign 	rdata_lane_crl	=	(prev_M_HSIZE == WORD && prev_M_HADDR == 3'd0) ? 0 :
								(prev_M_HSIZE == WORD && prev_M_HADDR == 3'd4) ? 1 :
								(prev_M_HSIZE == HALFWORD && prev_M_HADDR == 3'd0) ? 0 :
								(prev_M_HSIZE == HALFWORD && prev_M_HADDR == 3'd2) ? 0 :
								(prev_M_HSIZE == HALFWORD && prev_M_HADDR == 3'd4) ? 1 :
								(prev_M_HSIZE == HALFWORD && prev_M_HADDR == 3'd6) ? 1 :
								(prev_M_HSIZE == BYTE && prev_M_HADDR == 3'd0) ? 0 :
								(prev_M_HSIZE == BYTE && prev_M_HADDR == 3'd1) ? 0:
								(prev_M_HSIZE == BYTE && prev_M_HADDR == 3'd2) ? 0 :
								(prev_M_HSIZE == BYTE && prev_M_HADDR == 3'd3) ? 0 :
								(prev_M_HSIZE == BYTE && prev_M_HADDR == 3'd4) ? 1:
								(prev_M_HSIZE == BYTE && prev_M_HADDR == 3'd5) ? 1 :
								(prev_M_HSIZE == BYTE && prev_M_HADDR == 3'd6) ? 1 :
								(prev_M_HSIZE == BYTE && prev_M_HADDR == 3'd7) ? 1 : 0;
	assign  rdata_bus = (rdata_lane_crl) ? {M_HRDATA, 32'd0} : {32'd0, M_HRDATA};
	assign  S_HRDATA = (prev_S_HSIZE == DOUBLEWORD && S_HREADY) ? {rdata_bus[63:32], rdata_buf} : rdata_bus;
	assign	M_HWDATA = wdata_lane_crl ? S_HWDATA[0*8+:32] : S_HWDATA[0*8+:32];
endmodule
